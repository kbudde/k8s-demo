apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    a8r.io/repository: https://github.com/kbudde/k8s-demo
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: argocd-redis-ha-haproxy
    app.kubernetes.io/part-of: argocd
  name: argocd-redis-ha-haproxy
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-redis-ha-haproxy
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: e34e8124c38bcfd2f16e75620bbde30158686692b13bc449eecc44c51b207d54
        prometheus.io/path: /metrics
        prometheus.io/port: "9101"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: argocd-redis-ha-haproxy
      name: argocd-redis-ha-haproxy
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-redis-ha-haproxy
              topologyKey: kubernetes.io/hostname
      containers:
        - env:
            - name: AUTH
              valueFrom:
                secretKeyRef:
                  key: auth
                  name: argocd-redis
          image: haproxy:2.6.14-alpine
          imagePullPolicy: IfNotPresent
          lifecycle: {}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 3
          name: haproxy
          ports:
            - containerPort: 6379
              name: redis
            - containerPort: 9101
              name: metrics-port
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 3
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /usr/local/etc/haproxy
              name: data
            - mountPath: /run/haproxy
              name: shared-socket
      initContainers:
        - command:
            - argocd
            - admin
            - redis-initial-password
          image: quay.io/argoproj/argocd:v2.11.7
          imagePullPolicy: IfNotPresent
          name: secret-init
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
        - args:
            - /readonly/haproxy_init.sh
          command:
            - sh
          image: haproxy:2.6.14-alpine
          imagePullPolicy: IfNotPresent
          name: config-init
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /readonly
              name: config-volume
              readOnly: true
            - mountPath: /data
              name: data
      securityContext:
        fsGroup: 99
        runAsNonRoot: true
        runAsUser: 99
      serviceAccountName: argocd-redis-ha-haproxy
      volumes:
        - configMap:
            name: argocd-redis-ha-configmap
          name: config-volume
        - emptyDir: {}
          name: shared-socket
        - emptyDir: {}
          name: data
